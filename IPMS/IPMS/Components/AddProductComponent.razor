@using IPMS.Models.DTOs
@using IPMS.Services

@inject ProductService productService
@inject StockService stockService

<form @onsubmit="HandleSubmit">
    <div class="form-group">
        <label>
            SKU:
            <input class="form-control" type="text" @bind="@Product.SKU" />
        </label>
    </div>
    <br />

    <table class="table">
        <thead>
            <tr>
                <th>Matrial Name</th>
                <th>Quantity Require</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var stock in StockForProduct)
            {
                <tr>
                    <td>@stock.Name</td>
                    <td>
                        <input class="form-control" type="number" step="any" @bind="@stock.QuantityForProduct" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <br />
    <button class="btn btn-primary" type="submit">Submit</button>
</form>

@code {
    List<ProductDto> Products = new();
    List<AvaliableStock> SelectedStock = new();
    List<AvaliableStock> StockForProduct = new();
    List<StockDto> Stock = new();
    ProductDto Product { get; set; } = new ProductDto();
    string errorMessage = "";
    [Parameter] public EventCallback<string> OnClickCallback { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    async Task RefreshData()
    {
        Products = await productService.GetAllProducts();
        UpdateAvaliableStock();
    }

    async void UpdateAvaliableStock()
    {
        Stock = await stockService.GetAllStock();
        StockForProduct = new();

        foreach (var stock in Stock)
        {
            StockForProduct.Add(new()
                {
                    Id = stock.Id,
                    Name = stock.Name
                });
        }
    }

    async Task HandleSubmit()
    {
        SelectedStock = StockForProduct.Where(s => s.QuantityForProduct > 0).ToList();
        foreach (var selected in SelectedStock)
        {
            Product.Materials.Add(new()
                {
                    Id = new(),
                    Name = selected.Name,
                    Quantity = selected.QuantityForProduct,
                    StockId = selected.Id.ToString()
                });
        }

        var result = await productService.AddProduct(Product);
        if (!result)
        {
            errorMessage = "Failed to Add Item";
        }

        Products = await productService.GetAllProducts();
        Product = new ProductDto();
        await OnClickCallback.InvokeAsync(errorMessage);
        StateHasChanged();
    }

    public class AvaliableStock
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public decimal QuantityForProduct { get; set; }
    }
}
