@page "/addproduct"
@using BlazorBootstrap
@using IPMS.Data
@using IPMS.Models.DTOs
@using IPMS.Services
@inject ProductService productService
@inject StockService stockService

<PageTitle>Stock Inventory</PageTitle>
<h3>Add Product</h3>

<Modal @ref="modal" />
<button class="btn btn-primary" @onclick="ShowAddProductComponent">Add Product</button>
@if (errorMessage != "")
{
    <div class="alert alert-info" role="alert">
        @errorMessage
    </div>
}


@if (Products.Count != 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>SKU</th>
                <th>Cost</th>
                <th>Total Sold</th>
                <th>Quantity</th>
                <th>Matrials</th>
                <th>Remove</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var productDto in Products)
            {
                <tr>
                    <td>@productDto.SKU</td>
                    <td>@productDto.Cost</td>
                    <td>@productDto.QuantitySold</td>
                    <td>@productDto.QuantityAvaliable</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => ShowMatrialsComponent(productDto.Materials,productDto.SKU)">View</button>
                    </td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => RemoveProduct(productDto)">Remove</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    List<ProductDto> Products = new();
    ProductDto Product { get; set; } = new ProductDto();
    string errorMessage = "";

    private bool _ShowAddForm = false;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    private Modal modal = default!;

    private async Task OnShowModalClick()
    {
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }

    async void RemoveProduct(ProductDto product)
    {
        await productService.RemoveProduct(product);
        await RefreshData();
        StateHasChanged();
    }
    async Task RefreshData()
    {
        Products = await productService.GetAllProducts();
    }

    void ShowAddForm(bool showForm)
    {
        _ShowAddForm = showForm;
        StateHasChanged();
    }

    private async Task ShowAddProductComponent()
    {
        var parameters = new Dictionary<string, object>
        {
            { "OnClickCallback", EventCallback.Factory.Create<string>(this, CloseModel) }
        };
        await modal.ShowAsync<Components.AddProductComponent>(title: $"Add Product", parameters: parameters);
    }

    private async Task CloseModel(string message)
    {
        try
        {
            errorMessage = message;
            await modal.HideAsync();
            await RefreshData();
            StateHasChanged();
        }
        catch (Exception ex)
        {

        }
    }
    private async Task ShowMatrialsComponent(List<BomDto> matrials, string productName)
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("Matrials", matrials);
        await modal.ShowAsync<Components.ViewMatrialsComponent>(title: $"Matrials for {productName}", parameters: parameters);
    }

    public class AvaliableStock
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public decimal QuantityForProduct{ get; set; }
    }
}
