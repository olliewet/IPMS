@page "/addstock"
@using IPMS.Data
@using IPMS.Models.DTOs
@using IPMS.Services
@inject StockService StockService

<PageTitle>Stock Inventory</PageTitle>
<h3>Add Stock</h3>
<Modal @ref="modal" />
<button class="btn btn-primary" @onclick="ShowAddStockComponent">Add Stock</button>


@if (errorMessage != "")
{
    <br/>
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

@if(AvaliableStock.Count != 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Cost (£)</th>
                <th>QTY</th>
                <th>Remove</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var stockItem in AvaliableStock)
            {
                <tr>
                    <td>@stockItem.Name</td>
                    <td>@stockItem.Cost</td>
                    <td>@stockItem.Quantity</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => RemoveStockDto(stockItem)">Remove</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    List<StockDto> AvaliableStock = new();
    string errorMessage = "";
    private Modal modal = default!;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    private async Task ShowAddStockComponent()
    {
        var parameters = new Dictionary<string, object>
        {
            { "OnClickCallback", EventCallback.Factory.Create<string>(this, CloseModel) }
        };
        await modal.ShowAsync<Components.AddStockComponent>(
            title: "Add Stock", parameters: parameters);
    }

    private async Task RefreshData()
    {
        AvaliableStock = await StockService.GetAllStock();
    }

    async void RemoveStockDto(StockDto stockDto)
    {
        await StockService.RemoveStockItem(stockDto);
        await RefreshData();
        StateHasChanged();
    }

    private async Task CloseModel(string message)
    {
        try
        {
            errorMessage = message;
            await modal.HideAsync();
            //await modal.DisposeAsync();
            //modal = default!;
            await RefreshData();
            StateHasChanged();
        }
        catch(Exception ex)
        {
            
        }
       
    }

}
